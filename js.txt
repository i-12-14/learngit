js中想把字符串转换成数字   字符串减去0就可以


一个字符串以0x 或者是0X开头，parseInt()会将其解释为十六进制的数字


parseInt()不能把指定的字符串转换成数字 会返回一个NaN

基本的数据类型：String  Number  Boolean  Null  和Undefined 
复杂的数据类型：Object

未指定的函数返回值都为undefined   

函数也是对象

创建object的实例有两种方式：
第一种是使用new操作符后面跟Object构造函数  var person=new  Object();
第二种是对象字面量  
var person={
           name:"nile",
           age:29
};

可以使用对象字面量来封装可选参数


访问对象的属性都是使用点表示法，也可以使用方括号表示法来访问对象属性，
但需要注意的是要将访问的属性以字符串的形式放在括号中

方括号表示法可以用来访问属性名中含有语法错误字符的属性

如果设置的索引超过了数组的长度，就会自动添加


join()方法可以接受一个参数(作为分隔符的字符串),返回所有数组项的字符串

shift()  移除第一项             unshift()  添加第一项
push()  添加末尾一项             pop()  移除最后一项

当使用sort()的时侯  可以使用一个比较函数来产生排序结果  


在调用构造函数而不传递参数的情况下，新创建的对象会自动的调用当前的日期和时间


函数的内部属性：arguments和this


创建自定义自定义对象最简单的方法就是创建一个object的实例
var person=new Object();
person.name="zhangsan";
person.age=20;
person.sayName=function(){alert(this.name);}

抛出一个异常：
语法：throw 对象
一般对象是 new  Error("错误消息");

声明式函数
function func(){}   全局的函数
函数的字面量
var fn=fun(){};    //函数作为表达式存在

在js中重复的var  会自动删除

如果访问对象的某一个属性，现在对象中查找
如果当前对象没有 会在构造方法中查找，
如果没有会在对象的prototype中查找


原型对象站在new出来的对象来看  
原型属性站在继承的函数来看


唯一能判断NaN的函数是  isNaN()  或者通过自身比较的性质。


创建数组的方式new Array();  或者直接创建 var array=[1,'tstr',true];
超出索引的范围即为undefined


对象是键值组成的无序集合。

局部变量在不同的函数体之间 不会相互影响
undefined   函数参数是否传递

字符串的内容不会发生改变   字符串是不可变的  调用字符串的方法 只会返回新的字符串

indexof  索引字符串出现的位置  

slice可以截取数组，返回新的Array

arr.pop()  空数组返回undefined  删除最后一个
arr.push()  推进最后一个  

splice  是修改Array的万能方法   可以从指定位置删除  也可以从指定位置添加元素
splice('index','删除个数',"添加元素");

javascript 用{...} 键值对来表示一个对象，最后一个键值对不需要加逗号

当对象访问不存在的属性的时候  返回undefined

删除一个对象的属性   delete

判断一个对象是否有一个属性   使用in

argument最常用的方法就是判断传入参数的值的个数








